
{
{
{
{
Here
}
}
}
}
----
//Single line comment {{{{{
This should be on the same level
//}}}}}}}}}}}}}}}}}}}}}}}}}}}
This as well
----
/* Multiline comment {}
{{} shouldn't change
{{{
}
*/
same level
----
/** Brackets inside a javadoc {{
* }}
* {{{
*/
same level
----
"Brackets inside a String shouldn't be recognised {{{"
"Same level }}"
Same level
----
Brackets inside chars
'{'
Still no indentation
'{'
No indentation
----
button4.addActionListener(e -> {
String slogan = sloganField.getText();
String foundCandidates = "";

// Get the candidates array from the A3 class
Candidate[] allCandidates = A3.getCandidateArray();

// Display the list of candidates with the given slogan
for (Candidate candidate : allCandidates) {
String checkCan = candidate.getSlogan();
if (checkCan.equals("No more university fees!")) {
JOptionPane.showMessageDialog(frame, "ding");
foundCandidates += candidate.getName() + " (" + candidate.un + ")\n";
}
}

// Display the list of candidates with the given slogan
if (foundCandidates.equals("")) {
outputArea.setText("No candidates found with slogan \"" + slogan + "\"");
} else {
outputArea.setText("Candidates with slogan \"" + slogan + "\":\n" + foundCandidates);
}
});
----
public class IndentationHelper {
/**
* Enum which denotes the different types of indentation possible.
* When {@link #NULL} is passed to any method in this class, the output of said method should match the input.
*/
public enum IndentationType {
/**
* A tab character (\t) should be used for indentation.
*/
TABS("\t"),
/**
* Four spaces should be used for indentation.
*/
FOUR_SPACES("    "),
/**
* Two spaces should be used for indentation
*/
TWO_SPACES("  "),
/**
* Doesn't define an indentation type but
* Is used as a substitute to null to indicate that a String given to any method in {@link IndentationHelper} should not be changed.
*/
NULL("");

/**
* Holds the characters used for indentation of the type.
*/
private final String pattern;

/**
* Constructs the indentation type
* @param pattern The pattern to be used as indentation
*/
IndentationType(String pattern) {
this.pattern = pattern;
}

/**
* Get the pattern for a given Indentation type.
* @return the pattern to be used for indenting.
*/
public String getPattern() {
return pattern;
}

/**
* Returns the number of characters a pattern is using.
* @return the number of characters the pattern of this type consists of.
*/
private int getNumberOfChars() {
return pattern.length();
}

}

/**
* Aims to indent the given String using the pattern provided. Will return the String unchanged if {@link IndentationHelper.IndentationType#NULL} is passed as the IndentationType parameter.
* @param text The text that should be indented.
* @param type The type of indentation to be used.
* @return The indented String with the format specified.
*/
public static String formatIndentation(String text, IndentationType type) {
if(type == IndentationType.NULL) {
return text;
}
int numberOfBrackets = 0;
StringBuilder builder = new StringBuilder((int) (text.length()*1.25f));
boolean startOfLine = true;
boolean inString = false;
boolean inChar = false;
boolean singleLineComment = false;
boolean multiLineComment = false;
for(int i = 0; i< text.length(); i++) {
char current = text.charAt(i);
switch (current) {
case '{' -> {
if(!inString && !singleLineComment && !multiLineComment && !inChar) {
numberOfBrackets++;
startOfLine = false;
}
builder.append(current);
}
case '}' -> {
if(!inString && !singleLineComment && !multiLineComment && !inChar) {
numberOfBrackets--;
}
if(startOfLine && builder.length()-type.getNumberOfChars() > 0) {
startOfLine = false;
builder.replace(builder.length()-type.getNumberOfChars(),builder.length(),"}");
} else {
builder.append(current);
}
}
case '"'-> {
if(builder.length() > 0) {
if (isEscaped(builder,builder.length()) || inChar || singleLineComment ||multiLineComment) {
builder.append(current);
break;
}
}
inString = !inString;
builder.append(current);
}
case '\'' -> {
if(builder.length() > 0) {
if (isEscaped(builder,builder.length()) || inString || singleLineComment ||multiLineComment) {
builder.append(current);
break;
}
}
inChar = !inChar;
builder.append(current);
}
case '/' -> {
builder.append(current);
startOfLine = false;
if(i+1 < text.length() && !inString && !inChar) {
char nextChar = text.charAt(i+1);
if(nextChar == '/'){
singleLineComment = true;
}
if(nextChar == '*') {
multiLineComment = true;
}
}
}
case '\n' ->  {
startOfLine = true;
singleLineComment = false;
builder.append("\n").append(type.getPattern().repeat(Math.max(numberOfBrackets,0)));
}
case '*' -> {
builder.append(current);
startOfLine = false;
if(i+1 < text.length() && !inString && !inChar) {
char nextChar = text.charAt(i+1);
if(nextChar == '/'){
multiLineComment = false;
}
}
}
default ->  {
if(startOfLine && !Character.isWhitespace(current)) {
builder.append(current);
startOfLine = false;
} else if(!startOfLine) {
builder.append(current);
}
}
}
}
return builder.toString();
}

/**
* Determines if the character in the StringBuilder at the specified position is escaped.
* @param builder the StringBuilder which holds the current String
* @param index The index at which the character to be checked is located.
* @return True, if the escape character is referring to the character at the index, false otherwise.
*/
private static boolean isEscaped(StringBuilder builder,int index) {
int numberOfCharacters = 0;
index--;
if(index >= builder.length()) {
return false;
}
while(index > 0 && builder.charAt(index) == '\\') {
numberOfCharacters++;
index--;
}
return numberOfCharacters % 2 == 1;
}
}
